[tox]
envlist = py35-{syntax,unit-tests,build-binary}

[flake8]
deps = flake8-import-order
max-line-length = 120
exclude = .git,.tox,__pycache__,lib,bin,include
application-import-names = dcos_launch,cloudcleaner
import-order-style = smarkets

[pytest]
addopts = -rs -vv
testpaths =
  dcos_launch
  cloudcleaner

[testenv]
deps =
  six
  teamcity-messages
  -rrequirements.txt

[testenv:py35-syntax]
passenv = TEAMCITY_VERSION
deps = flake8
commands = flake8 --verbose

[testenv:py35-unit-tests]
passenv = TEAMCITY_VERSION
commands = py.test {posargs}

[testenv:py35-build-binary]
passenv = TEAMCITY_VERSION
commands =
  pyinstaller --distpath=./ dcos-launch.spec
  ./dcos-launch --help

[testenv:py35-dcos-launch]
# This is convenient entrypoint for using dcos-launch to cleanup tests
# without having to recreate a new virtual environment or download a binary
passenv =
  AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY
  AWS_REGION
  AZURE_CLIENT_ID
  AZURE_CLIENT_SECRET
  AZURE_SUBSCRIPTION_ID
  AZURE_TENANT_ID
  AZURE_LOCATION
  GOOGLE_APPLICATION_CREDENTIALS
  GCE_ZONE
commands =
  dcos-launch {posargs}

[testenv:py35-upgrade-test]
passenv =
  AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY
  AWS_REGION
  TEST_UPGRADE_INSTALLER_URL
  TEST_UPGRADE_USE_CHECKS
  TEST_UPGRADE_CONFIG_PATH
  TEST_UPGRADE_ENTERPRISE
  TEST_LAUNCH_CONFIG_PATH
  TEST_CREATE_CLUSTER
  TEST_CLUSTER_INFO_PATH
  DCOS_LOGIN_UNAME
  DCOS_LOGIN_PW
  TEAMCITY_VERSION
commands =
  py.test {posargs} advanced_tests/test_upgrade.py

[testenv:py35-failure-test]
passenv =
  AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY
  AWS_REGION
  TEST_LAUNCH_CONFIG_PATH
  TEST_CREATE_CLUSTER
  TEST_CLUSTER_INFO_PATH
  TEAMCITY_VERSION
commands =
  py.test {posargs} advanced_tests/test_aws_cf_failure.py

[testenv:py35-installer-test]
passenv =
  AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY
  AWS_REGION
  TEST_LAUNCH_CONFIG_PATH
  TEST_CREATE_CLUSTER
  TEST_CLUSTER_INFO_PATH
  TEST_INSTALL_PREREQS
  TEAMCITY_VERSION
commands = py.test {posargs} advanced_tests/test_installer_cli.py
